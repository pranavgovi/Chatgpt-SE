[
  {
    "type": "python",
    "code": "from googletrans import Translator\n\ndef translate_to_french(text):\n    translator = Translator(service_urls=['translate.google.com'])\n    translation = translator.translate(text, dest='fr')\n    return translation.text\n\n# Example usage\ninput_text = \"Hello, how are you?\"\ntranslated_text = translate_to_french(input_text)\nprint(translated_text)\n"
  },
  {
    "type": "python",
    "code": "string = \"Hello, \u4e16\u754c!\"\narabic_string = string.encode('utf-8').decode('utf-8')\n\nprint(arabic_string)\n"
  },
  {
    "type": "javascript",
    "code": "function handleVisibilityChangeWithCallback(callback) {\n    handleVisibilityChange(ws_url, id, navigate)\n        .then(() => {\n            if (typeof callback === 'function') {\n                callback();\n            }\n        })\n        .catch(error => {\n            console.error(error);\n            if (typeof callback === 'function') {\n                callback();\n            }\n        });\n}\n\ndocument.addEventListener('visibilitychange', () => {\n    handleVisibilityChangeWithCallback(() => {\n        // \uc5ec\uae30\uc5d0 \ub2e4\uc74c \uc791\uc5c5\uc744 \uc218\ud589\ud560 \ucf54\ub4dc \uc791\uc131\n    });\n});\n"
  },
  {
    "type": "python",
    "code": "import os\nimport sys\n\ndef create_markdown_folder(title):\n    template = f\"\"\"---\ntitle: {title}\ndate: \ndescription:\n---\n\n## In Summary (tl;dr)\n\n---\"\"\"\n\n    folder_name = title.lower().replace(\" \", \"_\")\n\n    try:\n        os.mkdir(folder_name)\n    except FileExistsError:\n        print(f\"Folder '{folder_name}' already exists. Please provide a unique title.\")\n        return\n\n    file_path = os.path.join(folder_name, f\"{folder_name}.md\")\n\n    with open(file_path, \"w\") as file:\n        file.write(template)\n\n    print(f\"Markdown file created: {file_path}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python create_markdown.py [TITLE]\")\n    else:\n        title = sys.argv[1]\n        create_markdown_folder(title)\n"
  },
  {
    "type": "python",
    "code": "from transliterate import translit\n\ndef convert_to_nepali(string):\n    nepali_text = translit(string, 'ne', reversed=True)\n    return nepali_text\n\n# Example usage\nenglish_text = \"Hello, how are you?\"\nnepali_text = convert_to_nepali(english_text)\nprint(nepali_text)\n"
  },
  {
    "type": "python",
    "code": "import logging\n\n# Configure the root logger to display messages at or above the DEBUG level\nlogging.basicConfig(level=logging.DEBUG)\n"
  },
  {
    "type": "javascript",
    "code": "bash: /path/to/nonexistent/file: No such file or directory\n"
  },
  {
    "type": "javascript",
    "code": "// index.ts\n\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport routes from './routes'; // Import the routes configuration\n\nVue.use(VueRouter);\n\n// Create the router instance\nconst router = new VueRouter({\n  mode: 'history', // Use history mode for cleaner URLs\n  routes,\n});\n\n// Create the main Vue instance and mount it to the DOM\nnew Vue({\n  router,\n  render: (h) => h(App),\n}).$mount('#app');\n"
  },
  {
    "type": "python",
    "code": "from django.core.paginator import Paginator\nfrom django.shortcuts import render\n\ndef get_more_movies(request):\n    page_number = 1\n    try:\n        page_number = int(request.GET.get(\"page\", 1))\n    except ValueError:\n        # Handle the case when the \"page\" parameter is not a valid integer\n        # You can choose to display an error message or set a default value\n\n    movies_per_page = NUMBER_MOVIES_PER_PAGE\n\n    movies = Movie.objects.all()\n    paginator = Paginator(movies, movies_per_page)\n\n    page = paginator.get_page(page_number)\n    movies = page.object_list\n\n    context = {\n        'movies': movies,\n        'next_page': page_number + 1 if page.has_next() else None,\n    }\n    return render(request, 'movies/_movies.html', context)\n"
  },
  {
    "type": "javascript",
    "code": "{\n  \"moduleNameMapper\": {\n    \"libp2p\": \"<rootDir>/__mocks__/libp2pMock.ts\"\n  },\n  // your other Jest configurations\n}\n"
  },
  {
    "type": "python",
    "code": "net = MomentNetwork(\n    ...,\n    optimizer_cls=torch.optim.Adam,\n    optimizer_args={\"lr\": 1e-4, \"weight_decay\": 1e-5}\n)\n"
  },
  {
    "type": "python",
    "code": "import requests\n\n# Jira API endpoint to check permissions\napi_url = 'https://your-jira-url.com/rest/api/2/mypermissions'\n\n# Replace 'username' and 'password' with your Jira credentials\nauth = ('username', 'password')\n\n# Specify the project key associated with the board\nproject_key = 'YOUR_PROJECT_KEY'\n\n# Send a GET request to the API endpoint\nresponse = requests.get(api_url, auth=auth, params={'projectKey': project_key})\n\nif response.status_code == 200:\n    permissions = response.json().get('permissions', {})\n    create_issue_permission = permissions.get('CREATE_ISSUE', False)\n\n    if create_issue_permission:\n        print(f\"You have permissions to create an issue on project {project_key}.\")\n    else:\n        print(f\"You do not have permissions to create an issue on project {project_key}.\")\nelse:\n    print(\"Failed to retrieve permissions from the Jira API.\")\n"
  },
  {
    "type": "java",
    "code": "ObjectMapper objectMapper = new ObjectMapper();\nSimpleModule module = new SimpleModule();\nmodule.addDeserializer(Point.class, new PointDeserializer());\nobjectMapper.registerModule(module);\n"
  },
  {
    "type": "ruby",
    "code": "#accordion.panel-group{\"aria-multiselectable\" => \"true\", role: \"tablist\"}\n  - regions_and_dojos.each_with_index do |(region, dojos), index|\n    .panel.panel-default\n      .panel-heading{id: \"heading#{index}\", role: \"tab\"}\n        %h4.panel-title\n          %a{\"data-toggle\" => \"collapse\",\n             href: \"##{\"collapse#{index}\"}\", role: \"button\"}\n            %i.fa.fa-chevron-right{\"aria-hidden\" => \"true\"}\n            = region\n            \\- #{dojos.pluck(:counter).sum} Dojos\n      .panel-collapse.collapse{id: \"collapse#{index}\", role: \"tabpanel\"}\n        .panel-body.grayscale-bg.dojo-flex\n          = render partial: 'shared/dojo', collection: dojos\n\n:javascript\n  $(document).ready(function() {\n    $('.collapse').on('shown.bs.collapse', function() {\n      $(this).parent().find(\".fa-chevron-right\").removeClass(\"fa-chevron-right\").addClass(\"fa-chevron-down\");\n    });\n  \n    $('.collapse').on('hidden.bs.collapse', function() {\n      $(this).parent().find(\".fa-chevron-down\").removeClass(\"fa-chevron-down\").addClass(\"fa-chevron-right\");\n    });\n  });\n"
  },
  {
    "type": "python",
    "code": "# Start Models Enum\n...\n# End Models Enum\n"
  },
  {
    "type": "python",
    "code": "from gpt_fn import text_generation\n\ninput_text = \"Once upon a time\"\ngenerated_text = text_generation.generate_text(input_text, max_length=100)\n\nprint(generated_text)\n"
  },
  {
    "type": "python",
    "code": "import copy\n\noriginal_list = [[1, 2, 3], [4, 5, 6]]\ndeep_copied_list = copy.deepcopy(original_list)\n\n# Now, if you modify the nested list inside the original list...\noriginal_list[0][0] = 99\n\nprint(original_list)        # Outputs: [[99, 2, 3], [4, 5, 6]]\nprint(deep_copied_list)     # Outputs: [[1, 2, 3], [4, 5, 6]] (remains unchanged)\n"
  },
  {
    "type": "java",
    "code": "@Transactional\npublic void saveEntity(Entity entity) {\n    try {\n        // Repository save operation\n        repository.save(entity);\n    } catch (Exception ex) {\n        // Log the exception or perform error handling\n        throw ex; // or throw a new exception\n    }\n}\n"
  },
  {
    "type": "java",
    "code": "Optional<String> first = strings.stream().findFirst();\nOptional<String> any = strings.stream().findAny();\n"
  },
  {
    "type": "javascript",
    "code": "String.prototype.checksum = function () {\n    let encoder = new TextEncoder();\n    let data = encoder.encode(this);\n    let seed = 0x12345678;\n    for (let i = 0; i < data.length; i++) {\n        seed += (data[i] * (i + 1));\n    }\n    return (seed & 0xffffffff).toString(16);\n}\n"
  },
  {
    "type": "java",
    "code": "public class EntityA {\n    // \uae30\ubcf8 \uc0dd\uc131\uc790\n    public EntityA() {\n        // ...\n    }\n\n    // \uc0dd\uc131\uc790\n    public EntityA(Long id, String name) {\n        // ...\n    }\n\n    // Getters and setters...\n}\n"
  },
  {
    "type": "python",
    "code": "import pandas as pd\n\n# Sample DataFrame\ndata = {'date': ['2023-06-01', '2023-06-01', '2023-06-02', '2023-06-02', '2023-06-03'],\n        'value': [10, 20, 30, 40, 50]}\ndf = pd.DataFrame(data)\n\n# Convert the 'date' column to datetime type\ndf['date'] = pd.to_datetime(df['date'])\n\n# Group the DataFrame by the 'date' column\ngrouped = df.groupby(pd.Grouper(key='date', freq='D'))\n\n# Iterate over the groups and create individual DataFrames\nfor group_name, group_data in grouped:\n    # Create a new DataFrame for each group\n    new_df = pd.DataFrame(group_data)\n    \n    # Perform any additional operations or analysis on the new DataFrame\n    \n    # Print the new DataFrame for demonstration purposes\n    print(f\"DataFrame for {group_name}:\")\n    print(new_df)\n    print()\n"
  },
  {
    "type": "python",
    "code": "string_with_null = \"Hello\\x00World\"\n\n# Write the string to a file\nwith open(\"data.txt\", \"w\") as file:\n    file.write(string_with_null)\n\n# Read the string from the file\nwith open(\"data.txt\", \"r\") as file:\n    string_from_file = file.read()\n"
  },
  {
    "type": "python",
    "code": "import os\nimport shutil\nimport tempfile\nimport unittest\nfrom script import camel_to_snake, rename_file, update_generate_statements\n\nclass ScriptTest(unittest.TestCase):\n    def setUp(self):\n        self.test_dir = tempfile.mkdtemp()\n\n    def tearDown(self):\n        shutil.rmtree(self.test_dir)\n\n    def test_camel_to_snake(self):\n        self.assertEqual(camel_to_snake(\"camelCase\"), \"camel_case\")\n        self.assertEqual(camel_to_snake(\"dcRedirectionPolicy_mock.go\"), \"dc_redirection_policy_mock.go\")\n        self.assertEqual(camel_to_snake(\"nDCHistoryResender_mock.go\"), \"ndc_historyresender_mock.go\")\n\n    def test_rename_file(self):\n        # Create a dummy Go file\n        file_path = os.path.join(self.test_dir, \"testFile.go\")\n        with open(file_path, \"w\") as file:\n            file.write(\"//go:generate mockgen -source TestFile.go -destination TestFile_mock.go\")\n\n        # Rename the file\n        rename_file(file_path)\n\n        # Check if the file is renamed\n        self.assertFalse(os.path.exists(file_path))\n        self.assertTrue(os.path.exists(os.path.join(self.test_dir, \"test_file.go\")))\n\n        # Check if go:generate statement is updated\n        with open(os.path.join(self.test_dir, \"test_file.go\"), \"r\") as file:\n            content = file.read()\n            self.assertIn(\"-source test_file.go -destination test_file_mock.go\", content)\n\n    def test_update_generate_statements(self):\n        # Create a dummy Go file\n        file_path = os.path.join(self.test_dir, \"testFile.go\")\n        with open(file_path, \"w\") as file:\n            file.write(\"//go:generate mockgen -source TestFile.go -destination TestFile_mock.go\")\n\n        # Update go:generate statements\n        update_generate_statements(file_path)\n\n        # Check if go:generate statement is updated\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            self.assertIn(\"-source test_file.go -destination test_file_mock.go\", content)\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
  },
  {
    "type": "javascript",
    "code": "writing() {\n  const templateVariables = {\n    serverPort: this.serverPort,\n    packageName: this.packageName,\n    baseName: this.baseName,\n    auth: this.auth,\n    eureka: this.eureka,\n    rabbitmq: this.rabbitmq,\n    postgresql: this.postgress,\n    mongodb: this.mongodb\n  };\n\n  const templatePaths = [\n    { src: \"go/docker\", dest: \"docker\" },\n    { src: \"go/go/proto\", dest: \"go/proto\" },\n    { src: \"go/go/go.mod\", dest: \"go/go.mod\" },\n    { src: \"go/go/main.go\", dest: \"go/main.go\" },\n    { src: \"go/go/Dockerfile\", dest: \"go/Dockerfile\" },\n    { src: \"go/go/Makefile\", dest: \"go/Makefile\" },\n    { src: \"go/go/README.md\", dest: \"go/README.md\" },\n    { src: \"go/go/.env\", dest: \"go/.env\" }\n  ];\n\n  const conditionalTemplates = [\n    { condition: this.auth, src: \"go/go/auth\", dest: \"go/auth\" },\n    {\n      condition: this.postgress || this.mongodb,\n      src: \"go/go/handler\",\n      dest: \"go/handler\"\n    },\n    { condition: this.postgress || this.mongodb, src: \"go/go/pkg\", dest: \"go/pkg\" }\n  ];\n\n  templatePaths.forEach(({ src, dest }) => {\n    this.fs.copyTpl(\n      this.templatePath(src),\n      this.destinationPath(dest),\n      templateVariables\n    );\n  });\n\n  conditionalTemplates.forEach(({ condition, src, dest }) => {\n    if (condition) {\n      this.fs.copyTpl(\n        this.templatePath(src),\n        this.destinationPath(dest),\n        templateVariables\n      );\n    }\n  });\n}\n"
  },
  {
    "type": "python",
    "code": "# Python 3\nu_string = \"abc\"  # Unicode string\n\nprint(u_string)  # Output: abc\n\n# Backslash is treated as an escape character\nu_string = \"\\n\"  # Unicode string\n\nprint(u_string)  # Output: (newline character)\n"
  },
  {
    "type": "javascript",
    "code": "handleWatchFileChanges(filePath) {\n  try {\n    let isWatching = true; // \u76e3\u8996\u30d5\u30e9\u30b0\u3092\u8ffd\u52a0\n\n    fs.watch(filePath, eventType => {\n      if (eventType === \"change\" && isWatching) { // \u76e3\u8996\u30d5\u30e9\u30b0\u304c\u6709\u52b9\u306a\u5834\u5408\u306e\u307f\u51e6\u7406\u3092\u5b9f\u884c\n        isWatching = false; // \u76e3\u8996\u30d5\u30e9\u30b0\u3092\u7121\u52b9\u5316\n        console.log(\"File changed\");\n        this.handleLoad(filePath, \"utf8\");\n        setTimeout(() => {\n          isWatching = true; // \u4e00\u5b9a\u6642\u9593\u5f8c\u306b\u76e3\u8996\u30d5\u30e9\u30b0\u3092\u518d\u5ea6\u6709\u52b9\u5316\n        }, 1000); // 1\u79d2\u5f8c\u306b\u518d\u5ea6\u76e3\u8996\u30d5\u30e9\u30b0\u3092\u6709\u52b9\u5316\u3059\u308b\u4f8b\n      }\n    });\n  } catch (error) {\n    this.Err.errorMain(error);\n  }\n}\n"
  },
  {
    "type": "javascript",
    "code": "// game.js\n\n// ... existing code ...\n\nexport function initGame() {\n    if (typeof window !== 'undefined') {\n        window.game = new Game(true);\n    }\n}\n"
  },
  {
    "type": "javascript",
    "code": "function identifyString(string) {\n  // Regular expression patterns for Twitch login names and StreamElements account IDs\n  const twitchPattern = /^[A-Za-z0-9_]{4,25}$/;\n  const streamelementsPattern = /^[a-fA-F0-9]{24}$/;\n\n  if (twitchPattern.test(string)) {\n    return \"Twitch login name\";\n  } else if (streamelementsPattern.test(string)) {\n    return \"StreamElements Account ID\";\n  } else {\n    return \"Unknown\";\n  }\n}\n\n// Example usage\nconst string1 = \"mytwitchusername123\";\nconst string2 = \"5eb63bbbe01eeed093cb22bb8f5acdc3\";\nconst string3 = \"invalid_string\";\n\nconsole.log(identifyString(string1));  // Output: Twitch login name\nconsole.log(identifyString(string2));  // Output: StreamElements Account ID\nconsole.log(identifyString(string3));  // Output: Unknown\n"
  },
  {
    "type": "javascript",
    "code": "const dayjs = require('dayjs');\nrequire('dayjs/locale/en'); // Import the locale you want to use (e.g., 'en' for English)\n\nconst formattedDate = dayjs(event.date).format(\"Do (ddd) MMMM YYYY\");\nconsole.log(formattedDate);\n"
  },
  {
    "type": "python",
    "code": "import click\nimport frontmatter\nfrom click_default_group import DefaultGroup\nfrom pydash import set_\n\n__author__ = \"Jeff Triplett\"\n__email__ = \"jeff.triplett@gmail.com\"\n__version__ = \"2023.3.1\"\n\n\ndef validate_extra_context(ctx, param, value):\n    \"\"\"Validate extra context.\"\"\"\n    for key in value:\n        if \"=\" not in key:\n            raise click.BadParameter(\n                \"EXTRA_CONTEXT should contain items of the form key=value; \"\n                \"'{}' doesn't match that form\".format(key)\n            )\n\n    return dict(key.lstrip(\"-\").split(\"=\", 1) for key in value) or None\n\n\n@click.group(cls=DefaultGroup, default=\"main\", default_if_no_args=True)\n@click.pass_context\ndef cli(context):\n    pass\n\n\n@cli.command(\n    context_settings=dict(\n        ignore_unknown_options=True,\n    )\n)\n@click.version_option(prog_name=\"frontmatter-cli\", version=__version__)\n@click.argument(\"extra_context\", nargs=-1, callback=validate_extra_context)\n@click.argument(\"input\", type=click.File(\"rb\"), default=\"-\")\n@click.argument(\"output\", type=click.File(\"wb\"), default=\"-\")\ndef main(input, output, extra_context):\n    chunk = input.read()\n    post = frontmatter.loads(chunk)\n\n    if extra_context:\n        for key, value in extra_context.items():\n            set_(post.metadata, key, value)\n\n    frontmatter.dump(post, output)\n\n\nif __name__ == \"__main__\":\n    cli()\n"
  },
  {
    "type": "ruby",
    "code": "# spec/your_fix_spec.rb\n\nrequire 'rails_helper'\n\nRSpec.describe \"Filtering sensitive parameters in logs\" do\n  it \"filters out secret values from logs\" do\n    # Mocking a controller action with sensitive parameters\n    params = { \n      passw: \"password\",\n      secret: \"secret_value\",\n      token: \"access_token\",\n      _key: \"api_key\",\n      crypt: \"encrypted_value\",\n      salt: \"salt_value\",\n      certificate: \"certificate_data\",\n      otp: \"123456\",\n      ssn: \"123-45-6789\"\n    }\n    \n    controller = ApplicationController.new\n    allow(controller).to receive(:params).and_return(params)\n    \n    # Trigger the action that logs the parameters\n    controller.action_that_logs_parameters\n    \n    # Fetch the logs\n    logs = Rails.logger.instance_variable_get(:@logdev).dev.string\n    \n    # Ensure that the sensitive parameters are filtered in logs\n    expect(logs).not_to include(\"password\")\n    expect(logs).not_to include(\"secret_value\")\n    expect(logs).not_to include(\"access_token\")\n    expect(logs).not_to include(\"api_key\")\n    expect(logs).not_to include(\"encrypted_value\")\n    expect(logs).not_to include(\"salt_value\")\n    expect(logs).not_to include(\"certificate_data\")\n    expect(logs).not_to include(\"123456\")\n    expect(logs).not_to include(\"123-45-6789\")\n  end\nend\n"
  },
  {
    "type": "python",
    "code": "from pydub import AudioSegment\n\n# Load the first WAV file\ncombined = AudioSegment.from_wav(\"file1.wav\")\n\n# Concatenate other WAV files\nother_files = [\"file2.wav\", \"file3.wav\"]  # Add as many as needed\nfor file in other_files:\n    sound = AudioSegment.from_wav(file)\n    combined += sound\n\n# Export the combined audio\ncombined.export(\"combined.wav\", format=\"wav\")\n"
  },
  {
    "type": "javascript",
    "code": "import 'jest-localstorage-mock';\nimport User from './user.js';\n\nlet user;\n\nbeforeEach(() => {\n    localStorage.clear();\n    // set localStorage values\n    localStorage.setItem('user', 'testUser');\n    localStorage.setItem('testUser', JSON.stringify({ 'July 2023': '1' }));\n\n    document.body.innerHTML = `\n        <p id=\"user\"></p>\n        <select id=\"rikishi\">\n            <option value=\"1\">Rikishi 1</option>\n            <option value=\"2\">Rikishi 2</option>\n        </select>\n        <button id=\"startPlayingButton\">Start Playing</button>\n        <button id=\"switchUserButton\">Switch User</button>\n        <input id=\"userSwitch\" type=\"text\">\n        <input id=\"backfillContest\" type=\"text\">\n        <input id=\"backfillRikishi\" type=\"text\">\n        <button id=\"backfillResultsButton\">Backfill Results</button>\n        <div id=\"backfilledResults\"></div>\n        <p id=\"feedback\"></p>\n    `;\n    user = new User('testUser');\n});\n\ntest('check if user is defined and picks are correct', () => {\n    const picks = user.getPicks();\n    expect(picks).toEqual({ 'July 2023': '1' });\n});\n\ntest('check if switchUser updates the user correctly', () => {\n    user.switchUser('newUser');\n    expect(localStorage.getItem('user')).toBe('newUser');\n});\n\ntest('check if backfillResults updates the results correctly', () => {\n    user.backfillResults('May 2023', '2');\n    let picks = user.getPicks();\n    expect(picks['May 2023']).toBe('2');\n});\n"
  },
  {
    "type": "javascript",
    "code": "const Pick = require('./pick');\n\ndescribe('Pick', () => {\n  it('should set the wrestlerName property correctly', () => {\n    const myPick = new Pick('Sumo Wrestler 1');\n    expect(myPick.wrestlerName).toBe('Sumo Wrestler 1');\n  });\n});\n"
  },
  {
    "type": "javascript",
    "code": "import Game from './game.js';\n"
  },
  {
    "type": "java",
    "code": "protected Point getPointInRange(int start, int end) {\n    int locX = getLocalX();\n    int locY = getLocalY();\n    int height = methods.calc.tileHeight(locX, locY);\n    Polygon[] triangles = this.getTriangles();\n    List<Point> points = new ArrayList<>();\n\n    for (int i = start; i < end && i < triangles.length; i++) {\n        for (int n = 0; n < triangles[i].npoints; n++) {\n            points.add(new Point(triangles[i].xpoints[n], triangles[i].ypoints[n]));\n        }\n    }\n\n    if (points.isEmpty()) {\n        return null;\n    }\n\n    // Return a random point from the list\n    int randomIndex = StdRandom.uniform(points.size());\n    return points.get(randomIndex);\n}\n"
  },
  {
    "type": "javascript",
    "code": "global.$ = jest.fn(() => ({\n    val: jest.fn(() => '1')\n}));\n\nconst { startPlaying } = require('./game');\n\ntest('check if startPlaying is defined and returns expected value', () => {\n    const result = startPlaying();\n    expect(result).toBe(\"You selected: 1\");\n});\n"
  },
  {
    "type": "python",
    "code": "code = \"\"\"\na = 1\nb = 2\nresult = a + b\n\"\"\"\n\nlocals_ = {}\nexec(code, {}, locals_)\nprint(locals_['result'])  # Output: 3\n"
  },
  {
    "type": "javascript",
    "code": "ImportError: cannot import name 'Feature' from 'setuptools' (C:\\Users\\hp\\Documents\\fastapi\\fastapienv\\Lib\\site-packages\\setuptools\\__init__.py)\n"
  },
  {
    "type": "javascript",
    "code": "app.start();\n"
  },
  {
    "type": "c++",
    "code": "#include <iostream>\n#include <sstream>\n#include <ctime>\n#include <esp_system.h>\n#include <nvs_flash.h>\n#include <nvs.h>\n\nint main() {\n  // Initialize NVS\n  esp_err_t err = nvs_flash_init();\n  if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n    // NVS partition was truncated and needs to be erased\n    ESP_ERROR_CHECK(nvs_flash_erase());\n    err = nvs_flash_init();\n  }\n  ESP_ERROR_CHECK(err);\n\n  // Open NVS namespace for storing previous timestamp and DST flag\n  nvs_handle nvs;\n  err = nvs_open(\"timestamp\", NVS_READWRITE, &nvs);\n  if (err != ESP_OK) {\n    std::cout << \"Error opening NVS: \" << esp_err_to_name(err) << std::endl;\n    return 1;\n  }\n\n  // Input timestamp string\n  std::string timestamp_str = \"231031020000\"; // YYMMDDhhmmss format\n\n  // Parse input timestamp string\n  std::tm timestamp_tm = {};\n  std::stringstream ss(timestamp_str);\n  ss >> std::get_time(&timestamp_tm, \"%y%m%d%H%M%S\");\n\n  // Check if current timestamp occurs between 2:00 AM and 3:00 AM\n  bool ambiguous_time = timestamp_tm.tm_hour == 2 && timestamp_tm.tm_min == 0 && timestamp_tm.tm_sec == 0;\n\n  // Load previous timestamp and DST flag from NVS\n  std::time_t prev_timestamp_unix = 0;\n  nvs_get_i64(nvs, \"timestamp_unix\", &prev_timestamp_unix);\n  int prev_dst_flag = -1;\n  nvs_get_i32(nvs, \"dst_flag\", &prev_dst_flag);\n\n  if (prev_dst_flag == -1) {\n    // No previous DST flag, let mktime determine DST flag for current timestamp\n    timestamp_tm.tm_isdst = -1;\n  } else if (!ambiguous_time) {\n    // Current timestamp does not occur between 2:00 AM and 3:00 AM, use previous DST flag\n    timestamp_tm.tm_isdst = prev_dst_flag;\n  } else if (prev_timestamp_unix == 0) {\n    // No previous timestamp, assume current timestamp is in standard time\n    timestamp_tm.tm_isdst = 0;\n  } else {\n    // Determine DST flag based on previous timestamp and current timestamp\n    std::tm prev_timestamp_tm = *std::localtime(&prev_timestamp_unix);\n    if (prev_timestamp_tm.tm_hour < 2 || (prev_timestamp_tm.tm_hour == 2 && prev_timestamp_tm.tm_min < 0)) {\n      // Previous timestamp occurred before DST transition time (2:00 AM)\n      timestamp_tm.tm_isdst = 0; // assume current timestamp is in standard time\n    } else if (prev_timestamp_tm.tm_hour > 3 || (prev_timestamp_tm.tm_hour == 3 && prev_timestamp_tm.tm_min >= 0)) {\n      // Previous timestamp occurred after DST transition time (3:00 AM)\n      timestamp_tm.tm_isdst = 1; // assume current timestamp is in DST\n    } else {\n      // Previous timestamp occurred during the hour that occurs twice due to the DST transition\n      timestamp_tm.tm_isdst = prev_dst_flag; // use previous DST flag\n    }\n  }\n\n  // Convert local time to Unix timestamp\n  std::time_t timestamp_unix = std::mktime(&timestamp_tm);\n\n  // Store current timestamp and DST flag in NVS for next measurement\n  nvs_set_i64(nvs, \"timestamp_unix\", timestamp_unix);\n  nvs_set_i32(nvs, \"dst_flag\", timestamp_tm.tm_isdst);\n  nvs_commit(nvs);\n\n  // Print results\n  std::cout << \"Input timestamp: \" << timestamp_str << std::endl;\n  std::cout << \"Unix timestamp: \" << timestamp_unix << std::endl;\n  std::cout << \"DST flag: \" << timestamp_tm.tm_isdst << std::endl;\n\n  return 0;\n}\n"
  },
  {
    "type": "javascript",
    "code": "const Wave = require('./Wave');\nconst Basho = require('./Basho');\n\ndescribe('Wave Class', () => {\n    let wave;\n    let basho1;\n    let basho2;\n    beforeEach(() => {\n        wave = new Wave(1);\n        basho1 = new Basho(1, 1);\n        basho2 = new Basho(2, 1);\n    });\n\n    test('addBasho() should add a Basho to the wave', () => {\n        wave.addBasho(basho1);\n        expect(wave.bashos.length).toBe(1);\n        expect(wave.bashos[0]).toBe(basho1);\n    });\n\n    test('getBasho() should return the correct Basho', () => {\n        wave.addBasho(basho1);\n        wave.addBasho(basho2);\n        const retrievedBasho = wave.getBasho(2);\n        expect(retrievedBasho).toBe(basho2);\n    });\n});\n"
  },
  {
    "type": "javascript",
    "code": "document.body.innerHTML = `\n    <p id=\"user\"></p>\n    <select id=\"rikishi\">\n        <option value=\"1\">Rikishi 1</option>\n        <option value=\"2\">Rikishi 2</option>\n    </select>\n    <input id=\"userSwitch\" type=\"text\">\n    <input id=\"backfillContest\" type=\"text\">\n    <input id=\"backfillRikishi\" type=\"text\">\n    <div id=\"backfilledResults\"></div>\n    <p id=\"feedback\"></p>\n`;\n"
  },
  {
    "type": "javascript",
    "code": "// div\u8981\u7d20\u3092\u53d6\u5f97\nlet divElement = document.querySelector('div');\n\n// \u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30ca\u30fc\u3092\u8ffd\u52a0\uff08\u30ad\u30e3\u30d7\u30c1\u30e3\u30d5\u30a7\u30fc\u30ba\uff09\ndivElement.addEventListener('click', function(event) {\n  console.log('div\u8981\u7d20\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u307e\u3057\u305f\u3002');\n}, true);\n"
  },
  {
    "type": "ruby",
    "code": "results = ActiveRecord::Base.connection.execute(\"\n  SELECT\n    REGEXP_MATCHES(comment, '@(\\d+)', 'g')\n  FROM responses\n\")\n"
  },
  {
    "type": "javascript",
    "code": "beforeEach(() => {\n    localStorage.clear();\n    // set localStorage values\n    localStorage.setItem('user', 'testUser');\n    localStorage.setItem('testUser', JSON.stringify({ 'July 2023': '1' }));\n\n    document.body.innerHTML = `\n        <p id=\"user\"></p>\n        <select id=\"rikishi\">\n            <option value=\"1\">Rikishi 1</option>\n            <option value=\"2\">Rikishi 2</option>\n        </select>\n        <button id=\"startPlayingButton\">Start Playing</button>\n        <button id=\"switchUserButton\">Switch User</button>\n        <input id=\"userSwitch\" type=\"text\">\n        <input id=\"backfillContest\" type=\"text\">\n        <input id=\"backfillRikishi\" type=\"text\">\n        <button id=\"backfillResultsButton\">Backfill Results</button>\n        <div id=\"backfilledResults\"></div>\n        <p id=\"feedback\"></p>\n    `;\n    \n    // Create a Game instance without initializing it\n    game = new Game(false);\n    \n    // Now initialize manually\n    game.initialize();\n});\n"
  },
  {
    "type": "javascript",
    "code": "// ... existing code ...\n\nbeforeEach(() => {\n    // ... existing code ...\n    initialize(); // Call the initialization function here\n});\n\n// ... existing code ...\n"
  },
  {
    "type": "python",
    "code": "import boto3\nfrom botocore.client import Config\n\n# Configure the endpoint URLs for different services\ns3_endpoint_url = 'http://localhost:4572'\nsqs_endpoint_url = 'http://localhost:4576'\n\n# Create custom session objects with different endpoint URLs\ns3_session = boto3.session.Session()\nsqs_session = boto3.session.Session()\n\n# Register event listeners for S3 to set the endpoint URL\ns3_session.client('s3').meta.events.register(\n    'service-created.s3',\n    lambda event, **kwargs: event.add_to_service(\n        'endpoint_url', s3_endpoint_url\n    )\n)\n\n# Register event listeners for SQS to set the endpoint URL\nsqs_session.client('sqs').meta.events.register(\n    'service-created.sqs',\n    lambda event, **kwargs: event.add_to_service(\n        'endpoint_url', sqs_endpoint_url\n    )\n)\n\n# Set the custom sessions as default session factories\nboto3.setup_default_session(\n    region_name='us-east-1', \n    botocore_session=s3_session,\n    session=boto3.DEFAULT_SESSION\n)\n\nboto3.setup_default_session(\n    region_name='us-east-1', \n    botocore_session=sqs_session,\n    session=boto3.DEFAULT_SESSION\n)\n\n# Now all subsequent client/resource creation will use the registered sessions\ns3_client = boto3.client('s3')\nsqs_client = boto3.client('sqs')\n\n# Use the S3 client and SQS client with the custom endpoint URLs\ns3_client.list_buckets()\nsqs_client.list_queues()\n"
  },
  {
    "type": "javascript",
    "code": "Cypress.Commands.add('getRandomFixture', () => {\n    return cy.readFile('cypress/fixtures/usedTorrents.json').then((usedTorrents) => {\n        return cy.readFile('cypress/fixtures/torrents.json').then((allTorrents) => {\n            const unusedTorrents = allTorrents.filter((torrent) => !usedTorrents.includes(torrent));\n\n            // If there are no unused torrents, reset the used torrents list\n            if (unusedTorrents.length === 0) {\n                cy.writeFile('cypress/fixtures/usedTorrents.json', []);\n                unusedTorrents = allTorrents;\n            }\n\n            const selectedTorrent = unusedTorrents[Math.floor(Math.random() * unusedTorrents.length)];\n\n            // Add the selected torrent to the used torrents list\n            usedTorrents.push(selectedTorrent);\n            cy.writeFile('cypress/fixtures/usedTorrents.json', usedTorrents);\n\n            return cy.fixture(`torrents/${selectedTorrent}`);\n        });\n    });\n});\n"
  },
  {
    "type": "javascript",
    "code": "import 'jest-localstorage-mock';\nimport Game from './game.js';\n\nlet game;\n\nbeforeEach(() => {\n  //... setup logic\n  game = new Game();\n});\n\n//... your tests\n"
  },
  {
    "type": "javascript",
    "code": "const EventEmitter = require('events');\nlet eventEmitter = new EventEmitter();\n\nfunction eventPromise(eventEmitter, eventName) {\n    return new Promise((resolve, reject) => {\n        const successHandler = (data) => {\n            eventEmitter.removeListener('error', errorHandler);\n            resolve(data);\n        };\n\n        const errorHandler = (error) => {\n            eventEmitter.removeListener(eventName, successHandler);\n            reject(error);\n        };\n\n        eventEmitter.once(eventName, successHandler);\n        eventEmitter.once('error', errorHandler);\n    });\n}\n\n// Use like so:\neventPromise(eventEmitter, 'data').then(console.log).catch(console.error);\n"
  },
  {
    "type": "c",
    "code": "        perror(\"Error creating thread\");\n        fclose(wordlist);\n        return 1;\n    }\n\n    for (int i = 0; i < NUM_THREADS; i++) {\n        pthread_join(threads[i], NULL);\n    }\n\n    pthread_mutex_destroy(&wordlist_mutex);\n    fclose(wordlist);\n    return 0;\n}\n"
  },
  {
    "type": "python",
    "code": "def next_braille_representation(current_rep):\n    # Convert the current representation to an integer (treated as binary)\n    current_int = int(current_rep, 2)\n\n    # Calculate the next integer representation\n    next_int = ((current_int & 0b001111) << 1) | 0b000001\n\n    # Convert the next integer back to a 6-bit binary string\n    next_rep = format(next_int, '06b')\n\n    return next_rep\n"
  },
  {
    "type": "python",
    "code": "import asyncio\nimport hamilton as ht\n\n# Define the pipeline\npipeline = ht.Pipeline()\n\n# Node to generate a range of numbers\n@pipeline.node()\ndef generate_numbers(n):\n    return list(range(n))\n\n# Node to apply a delay and return a formatted string for each number\n@pipeline.node(depends_on='generate_numbers', apply_async=True)\nasync def format_numbers(numbers):\n    formatted_numbers = []\n    for number in numbers:\n        await asyncio.sleep(1)\n        formatted_numbers.append(f\"Number: {number}\")\n    return formatted_numbers\n\n# Running the pipeline\nresult = pipeline.run({'n': 3})\nprint(result['format_numbers'])\n"
  },
  {
    "type": "python",
    "code": "import boto3\nimport time\n\ndef get_roles_with_policies(policy_arns):\n    client = boto3.client('iam')\n    paginator = client.get_paginator('list_roles')\n    roles_with_policies = []\n\n    for page in paginator.paginate():\n        for role in page['Roles']:\n            role_policies = get_role_policies(client, role['RoleName'])\n            if set(policy_arns).issubset(set(role_policies)):\n                roles_with_policies.append(role['RoleName'])\n\n    return roles_with_policies\n\ndef get_role_policies(client, role_name):\n    policy_arns = []\n    try:\n        attached_policies = client.list_attached_role_policies(RoleName=role_name)['AttachedPolicies']\n        for policy in attached_policies:\n            policy_arns.append(policy['PolicyArn'])\n    except Exception as e:\n        print(f\"Failed to fetch policies for role: {role_name} due to: {str(e)}\")\n        time.sleep(1)  # basic backoff strategy\n    return policy_arns\n\n# list of policy ARNs we want to check\npolicy_arns = ['arn:aws:iam::aws:policy/AmazonS3FullAccess', 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess']\n\n# get roles with the specified policies\nroles = get_roles_with_policies(policy_arns)\n\n# print the roles\nfor role in roles:\n    print(role)\n"
  },
  {
    "type": "javascript",
    "code": "const fs = require('fs');\nconst parse = require('csv-parse/lib/sync');\n\nlet csvData = fs.readFileSync(process.argv[2]);\nlet csv = parse(csvData);\n\nconsole.log(csv);\n"
  },
  {
    "type": "python",
    "code": "import asyncio\n\ndef is_valid(board, row, col, num):\n    for x in range(9):\n        if board[row][x] == num:\n            return False\n\n    for x in range(9):\n        if board[x][col] == num:\n            return False\n\n    start_row = row - row % 3\n    start_col = col - col % 3\n    for i in range(3):\n        for j in range(3):\n            if board[i+start_row][j+start_col] == num:\n                return False\n    return True\n\nasync def solve_sudoku(board):\n    for i in range(9):\n        for j in range(9):\n            if board[i][j] == 0:\n                for num in range(1, 10):\n                    if is_valid(board, i, j, num):\n                        board[i][j] = num\n                        if await solve_sudoku(board):\n                            return True\n                        else:\n                            board[i][j] = 0\n                return False\n    return True\n\ndef print_board(board):\n    for i in range(len(board)):\n        if i % 3 == 0 and i != 0:\n            print(\"- - - - - - - - - - -\")\n        for j in range(len(board[0])):\n            if j % 3 == 0 and j != 0:\n                print(\" | \", end=\"\")\n            if j == 8:\n                print(board[i][j])\n            else:\n                print(str(board[i][j]) + \" \", end=\"\")\n\n# example puzzle\npuzzle = [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9]\n]\n\nasyncio.run(solve_sudoku(puzzle))\nprint_board(puzzle)\n"
  },
  {
    "type": "java",
    "code": "import org.apache.avro.Schema;\nimport org.apache.avro.generic.GenericData;\nimport org.apache.avro.generic.GenericRecord;\nimport org.apache.parquet.avro.AvroParquetWriter;\nimport org.apache.parquet.hadoop.metadata.CompressionCodecName;\nimport org.apache.parquet.io.OutputFile;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class Main {\n\n  public static void main(String[] args) throws IOException {\n\n    // Define the Avro schema\n    String rawSchema = \"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Test\\\",\\\"fields\\\":[{\\\"name\\\":\\\"field1\\\",\\\"type\\\":\\\"string\\\"}]}\";\n    Schema schema = new Schema.Parser().parse(rawSchema);\n\n    // Create a record to write\n    GenericRecord record = new GenericData.Record(schema);\n    record.put(\"field1\", \"Test data\");\n\n    // Define the path and create the Parquet writer\n    OutputFile outputFile = new OutputFile(Paths.get(\"data.parquet\").toAbsolutePath(), Files::newOutputStream);\n    try (var parquetWriter = AvroParquetWriter\n        .<GenericRecord>builder(outputFile)\n        .withSchema(schema)\n        .withCompressionCodec(CompressionCodecName.SNAPPY)\n        .build()) {\n\n      // Write the record to the Parquet file\n      parquetWriter.write(record);\n    }\n  }\n}\n"
  },
  {
    "type": "python",
    "code": "import requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Fetch GDP data\ngdp_url = \"http://api.worldbank.org/v2/country/all/indicator/NY.GDP.MKTP.CD?date=2020&format=json&per_page=300\"\ngdp_response = requests.get(gdp_url)\ngdp_data = gdp_response.json()[1]\n\n# Fetch area data\narea_url = \"http://api.worldbank.org/v2/country/all/indicator/AG.SRF.TOTL.K2?date=2020&format=json&per_page=300\"\narea_response = requests.get(area_url)\narea_data = area_response.json()[1]\n\n# Extract and clean the data\ngdp_dict = {item['country']['id']: item['value'] for item in gdp_data if item['value']}\narea_dict = {item['country']['id']: item['value'] for item in area_data if item['value']}\n\n# Create a list of dictionaries, each containing the data for one country\ndata = [\n    {\"CountryCode\": country_code, \"GDP\": gdp, \"Area\": area_dict[country_code]}\n    for country_code, gdp in gdp_dict.items()\n    if country_code in area_dict\n]\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Plot the data\nplt.figure(figsize=(10, 5))\nplt.scatter(df['GDP'], df['Area'], alpha=0.5)\nplt.title('Countries by GDP and Area (2020)')\nplt.xlabel('GDP (Current USD)')\nplt.ylabel('Area (sq. km)')\nplt.xscale('log')\nplt.yscale('log')\nplt.grid(True, which='both', linestyle='--', linewidth=0.5)\nplt.show()\n"
  },
  {
    "type": "python",
    "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))  # For example, computing factorial of 5\n"
  },
  {
    "type": "python",
    "code": "import numpy as np\n\n# Your large numpy array\narr = np.arange(1000)\n\n# Convert to string with custom edgeitems\narr_str = np.array2string(arr, edgeitems=10)\n\nprint(arr_str)\n"
  },
  {
    "type": "javascript",
    "code": "const express = require('express');\nconst session = require('express-session');\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\nconst hbs = require('express-handlebars');\n\nconst\n"
  },
  {
    "type": "python",
    "code": "len, print = print, len\ndef print_len(x):\n    \"Print the length of x\"\n    len(print(x))\n"
  }
]
